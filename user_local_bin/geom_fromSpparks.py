#!/usr/bin/env python
# -*- coding: UTF-8 no BOM -*-
'''
 Author: Haiming Zhang
 Mail: hm.zhang@sjtu.edu.cn
 Created Time: 2016年05月28日 星期六 15时47分28秒
'''

import os,sys,math
import numpy as np
from optparse import OptionParser
from myLibs import ebsdInfo, readAngFile, readCtfFile
import damask

scriptName = os.path.splitext(os.path.basename(__file__))[0]
scriptID   = ' '.join([scriptName,damask.version])


info = {
          'grid':   np.ones(3,'i'),
          'size':   np.zeros(3,'d'),
          'origin': np.zeros(3,'d'),
          'microstructures': 0,
          'homogenization': 0
         }

  
#-------------------------------------re-------------------------------------------------------------
#                                MAIN
#--------------------------------------------------------------------------------------------------
parser = OptionParser(option_class=damask.extendableOption, usage='%prog options [file[s]]', description = """

Generate geometry description and material configuration from EBSD data in given square-gridded 'ang' file.
Two phases can be discriminated based on threshold value in a given data column.

""", version = scriptID)

parser.add_option('--microstructure',      dest='microstructure', type='int', metavar = 'int',
                  help='homogenization index for <microstructure> configuration [%default]')
parser.set_defaults(
                    microstructure = 100,
                 )
(options,filenames) = parser.parse_args()


# --- loop over input files -------------------------------------------------------------------------
if filenames == []: 
    print 'missing input files'
    exit()

for filename in filenames:

    fopen = open(filename, 'r')
    fout  = open(os.path.splitext(filename)[0] + '.geom','w')
    content = fopen.readlines()
    grid = [int(content[i].split()[1]) for i in range(5,8)]
    maxGrid = int(content[3].split()[0])
    origin = (0,0,0)
    size = [i*0.05 for i in grid]
    homogenization = 1

#-- report ---------------------------------------------------------------------------------------
    fout.write('6   header\n')
    fout.write('This model is generated by Sppark\n')
    fout.write('grid     a %s  b %s  c %s\n'%(str(grid[0]), str(grid[1]), str(grid[2]) ))
    fout.write('size     x %s  y %s  z %s\n'%(str(size[0]), str(size[1]), str(size[2]) ))
    fout.write('origin   x 0.0 y 0.0 z 0.0\n')
    fout.write('homogenization  %i\n'%homogenization)
    fout.write('microstructures %i\n'%options.microstructure)

    mapGrid2Grain = np.empty([grid[0],grid[1],grid[2]], dtype=int)
    for i in xrange(len(content)-maxGrid, len(content)):
        words = content[i].split()
        mapGrid2Grain[int(words[2]), int(words[3]), int(words[4])] = int(words[1])

    for iz in xrange(grid[2]):
        for iy in xrange(grid[1]):
            fout.write(' '.join( str(mapGrid2Grain[ix, iy, iz]) for ix in xrange(grid[0]) ) + '\n')

