#!/usr/bin/env python
# -*- coding: UTF-8 no BOM -*-
'''
 Author: Haiming Zhang
 Mail: hm.zhang@sjtu.edu.cn
 Created Time: 2016年05月28日 星期六 15时47分28秒
'''

import os,sys,math
import numpy as np
from optparse import OptionParser
from myLibs import ebsdInfo, readAngFile, readCtfFile
import damask
from subprocess import call

scriptName = os.path.splitext(os.path.basename(__file__))[0]
scriptID   = ' '.join([scriptName,damask.version])


info = {
          'grid':   np.ones(3,'i'),
          'size':   np.zeros(3,'d'),
          'origin': np.zeros(3,'d'),
          'microstructures': 0,
          'homogenization': 0
         }

#-------------------------------------re-------------------------------------------------------------
#                                MAIN
#--------------------------------------------------------------------------------------------------
parser = OptionParser(option_class=damask.extendableOption, usage='%prog options [file[s]]', description = """

generate geom and vtr file based on the results of spparks
""", version = scriptID)

parser.add_option('-n', '--nheader',      dest='nheader', type='int', metavar = 'int',
                  help='the number of header in the input spparks files [%default]')
parser.add_option('-c', '--check', dest='geomcheck', action='store_false',
                  help = "whether check the geom file [%default]")   
parser.set_defaults(
                    nheader = 9,
                    geomcheck= True,
                 )
(options,filenames) = parser.parse_args()


# --- loop over input files -------------------------------------------------------------------------
if filenames == []: 
    print 'missing input files'
    exit()

for filename in filenames:

    fileNamePrefix = os.path.splitext(filename)[0]
    fopen = open(filename, 'r')

    content = []
    for i in xrange(options.nheader):
        content.append(fopen.readline())

    # Get the global info about the geom file.
    grid = [int(content[i].split()[1]) for i in range(5,8)]
    maxGrid = int(content[3].split()[0])
    origin = (0,0,0)
    size = [i*0.05 for i in grid]
    homogenization = 1

    lengthOfEachFile = maxGrid + options.nheader

    counter = options.nheader
    line = fopen.readline()
    mapGrid2Grain0 = np.zeros([grid[0], grid[1], grid[2]], dtype=int); grainList = []

    # read the input spparks file
    while line:
        if counter - lengthOfEachFile*(counter/lengthOfEachFile) > options.nheader-1:
            words = map(int,line.split()[:-1])
            if float(line.split()[-1]) < 1.0:  # 2d gridz = 0.5
                words.append(0)
            else:
                words.append(int(line.split()[-1]))

            mapGrid2Grain0[words[2], words[3], words[4]] = words[1]
            grainList.append(words[1])

        if np.mod(counter, lengthOfEachFile) == 0:
            # content store a entire file, now report the geom file
            nstep = str(counter/lengthOfEachFile)

            print '-------------------------------------------------------'
            print 'write the data at step %s'%nstep
            numGrain = len(set(grainList))
            mapGrainInSpparks2Geom = {}

            for ig,igS in enumerate(set(grainList)):
                mapGrainInSpparks2Geom[igS] = ig+1

            # append the name of output file
            if options.geomcheck:
                fileName = fileNamePrefix +'_Step'+nstep+'.geom'
            else:
                fileName = fileNamePrefix +'_Step'+nstep+'_Ngrains'+str(numGrain)+'.geom'
            fout  = open(fileName,'w')

            #-- report ---------------------------------------------------------------------------------------
            fout.write('6   header\n')
            fout.write('This model is generated by Sppark\n')
            fout.write('grid     a %s  b %s  c %s\n'%(str(grid[0]), str(grid[1]), str(grid[2]) ))
            fout.write('size     x %s  y %s  z %s\n'%(str(size[0]), str(size[1]), str(size[2]) ))
            fout.write('origin   x 0.0 y 0.0 z 0.0\n')
            fout.write('homogenization  %i\n'%homogenization)
            fout.write('microstructures %i\n'%numGrain)

            for iz in xrange(grid[2]):
                for iy in xrange(grid[1]):
                    fout.write(' '.join( str(mapGrainInSpparks2Geom[mapGrid2Grain0[ix, iy, iz]] ) for ix in xrange(grid[0]) ) + '\n')
            fout.close()

            # empty content, counter to store a new file
            #counter = 0
            grainList = []

            if options.geomcheck:
                print 'geom_check ...'
                p = 'geom_check '+fileName 
                sts = call(p,shell=True)
        # read data and counter
        line = fopen.readline()
        counter += 1

