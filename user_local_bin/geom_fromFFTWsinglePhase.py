#!/usr/bin/env python
# -*- coding: UTF-8 no BOM -*-
'''
 Author: Haiming Zhang
 Mail: hm.zhang@sjtu.edu.cn
 Created Time: 2016年05月28日 星期六 15时47分28秒
'''

import os,sys,math
import numpy as np
from optparse import OptionParser

scriptName = os.path.splitext(os.path.basename(__file__))[0]


#-------------------------------------re-------------------------------------------------------------
#                                MAIN
#--------------------------------------------------------------------------------------------------
parser = OptionParser(usage='%prog options [file[s]]', description = """

Generate geometry description and material configuration from EBSD data in given square-gridded 'ang' file.
Two phases can be discriminated based on threshold value in a given data column.

""")

parser.add_option('-d','--dimension',      dest='dimension', type='int', metavar = 'int',
                  help='dimension of the model [%default]')
parser.add_option('-r', dest='randomOrient', action='store_true',
                  help = 'using random orientation [%default]' )
parser.set_defaults(
                    dimension = 2,
                    randomOrient = False,
                 )
(options,filenames) = parser.parse_args()


# --- loop over input files -------------------------------------------------------------------------
if filenames == []: 
    print 'missing input files'
    exit()

for filename in filenames:

    fopen = open(filename, 'r')
    fout  = open(os.path.splitext(filename)[0] + '.geom','w')
    matconfig = open(os.path.splitext(filename)[0] + '.matconfig','w')

    line = fopen.readline()

    eulerangles = []; phases = []; grains = []; grids = []
    while line:
        content = line.split()
        eulerangles.append( map(float, content[0:3] ))
        grids.append( map( int, content[3:6] ))
        grains.append( int(content[6]))
        line = fopen.readline()

    eulerangles = np.array(eulerangles)
    grids = np.array(grids)
    grains = np.array(grains)

    # ---------adjust gridZmax according to the dimension
    gridXmax, gridYmax, gridZmax = [ np.max(grids[:,i]) for i in xrange(3) ]
    if options.dimension == 2: gridZmax = 1
    dataLength = gridXmax*gridYmax*gridZmax

    # calculate the average Euler angles
    avgEulerAngles = {}; grainSize = {}
    ngrain = len(set(grains[1:dataLength]))
    for ig in set(grains[1:dataLength]):
        avgEulerAngles[str(ig)] = np.zeros(3, dtype=float)
        grainSize[str(ig)] = 0

    for i in xrange(dataLength):
        avgEulerAngles[str(grains[i])] += eulerangles[i]
        grainSize[str(grains[i])] += 1

    for ig in avgEulerAngles.keys():
        avgEulerAngles[ig] = avgEulerAngles[ig]/float(grainSize[ig])

    grid = gridXmax, gridYmax, gridZmax
    origin = (0,0,0)
    size = [i*0.05 for i in grid]
    homogenization = 1

#-- report ---------------------------------------------------------------------------------------
    print 'write geom file'
    fout.write('6   header\n')
    fout.write('This model is generated by fftw\n')
    fout.write('grid     a %s  b %s  c %s\n'%(str(grid[0]), str(grid[1]), str(grid[2]) ))
    fout.write('size     x %s  y %s  z %s\n'%(str(size[0]), str(size[1]), str(size[2]) ))
    fout.write('origin   x 0.0 y 0.0 z 0.0\n')
    fout.write('homogenization  %i\n'%homogenization)
    fout.write('microstructures %i\n'%ngrain)

    for iz in xrange(grid[2]):
        iystart = iz*grid[1]*grid[0]
        for iy in xrange(grid[1]):
            ixstart = iystart + iy*grid[0]
            fout.write(' '.join( [ str( grains[ix+ixstart]  ) for ix in xrange(grid[0]) ] ) + '\n')

    print 'write material.config file'
    print 'write microstructure'
    matconfig.write('#----------------#\n')
    matconfig.write('<microstructure>\n')
    matconfig.write('#----------------#\n')
    for i in  xrange(ngrain):
        matconfig.write('[Grain%s]\n'%str(i+1))
        matconfig.write('crystallite 1\n')
        matconfig.write('(constituent)  phase 1 texture %s fraction 1.0\n'%(str(i+1)) )

    matconfig.write('\n')
    print 'write texture'
    matconfig.write('#----------------#\n')
    matconfig.write('<texture>\n')
    matconfig.write('#----------------#\n')
    for i in  xrange(ngrain):
        if str(i+1) not in avgEulerAngles.keys(): continue
        if options.randomOrient:
            eulerangle = np.random.rand(3)*np.array([360.0, 180.0, 360.0])
        else:
            eulerangle = avgEulerAngles[str(i+1)]
        matconfig.write('[Texture%s]\n'%str(i+1))
        matconfig.write('(gauss)  phi1 %7.3f Phi %7.3f phi2 %7.3f scatter 0.0 fraction 1.0\n'\
           %(eulerangle[0], eulerangle[1], eulerangle[2]) )
